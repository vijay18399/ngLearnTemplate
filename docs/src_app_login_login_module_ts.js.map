{"version":3,"file":"src_app_login_login_module_ts.js","mappings":"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","sources":["./src/app/login/forgot-password/forgot-password.component.ts","./src/app/login/forgot-password/forgot-password.component.html","./src/app/login/login-form/login-form.component.ts","./src/app/login/login-form/login-form.component.html","./src/app/login/login-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/login/login.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss']\n})\nexport class ForgotPasswordComponent {\n  forgotForm!: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n  ) {\n    this.forgotForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n   onSubmit() {\n    const { email } = this.forgotForm.value;\n    // this.authService.ForgotPassword(email);\n\n  }\n}\n","\n\n<div class=\"login\">\n    <mat-card  class=\"login-card\">\n        <h3 class=\"title\">Reset Password</h3>\n        <form [formGroup]=\"forgotForm\" (ngSubmit)=\"onSubmit()\" class=\"form\">\n            <mat-label>Email</mat-label>\n            <mat-form-field> \n              <input matInput formControlName=\"email\">\n              <mat-error *ngIf=\"forgotForm.get('email')?.dirty && forgotForm.get('email')?.hasError('required')\">Email is required</mat-error>\n              <mat-error *ngIf=\"forgotForm.get('email')?.dirty && forgotForm.get('email')?.hasError('email')\">Invalid email address</mat-error>\n            </mat-form-field>\n            <button color=\"accent\" mat-raised-button [disabled]=\"!forgotForm.valid\" type=\"submit\" >Reset Password</button>\n\n        </form>\n    </mat-card>\n</div>","import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\n// import { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.scss']\n})\nexport class LoginFormComponent {\n  isSignUp = false;\n  signupForm!: FormGroup;\n\n  constructor(\n    private fb: FormBuilder\n  ) {\n    this.signupForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n   onSubmit() {\n    const { email, password } = this.signupForm.value;\n     if(this.isSignUp){\n      //  this.authService.SignUp(email,password);\n     }else{\n      // this.authService.SignIn(email,password);\n     }\n  \n  }\n}\n","<div class=\"login\">\n    <mat-card class=\"login-card\">\n        <div  mat-stroked-button class=\"google-btn\" >\n            Continue with <img src=\"assets/gicon.svg\" alt=\"\">\n        </div>\n        <form [formGroup]=\"signupForm\">\n\n            <mat-label>Email</mat-label>\n            <mat-form-field>\n\n                <input matInput formControlName=\"email\">\n                <mat-error *ngIf=\"signupForm.get('email')?.dirty && signupForm.get('email')?.hasError('required')\">Email\n                    is required</mat-error>\n                <mat-error *ngIf=\"signupForm.get('email')?.dirty && signupForm.get('email')?.hasError('email')\">Invalid\n                    email address</mat-error>\n            </mat-form-field>\n            <mat-label>Password</mat-label>\n            <mat-form-field>\n                <input matInput type=\"password\" formControlName=\"password\">\n                <mat-error\n                    *ngIf=\"signupForm.get('password')?.dirty && signupForm.get('password')?.hasError('required')\">Password\n                    is required</mat-error>\n                <mat-error\n                    *ngIf=\"signupForm.get('password')?.dirty && signupForm.get('password')?.hasError('minlength')\">Password\n                    must be at least 6 Characters</mat-error>\n            </mat-form-field>\n\n            <button [disabled]=\"!signupForm.valid\" mat-raised-button color=\"accent\">{{ isSignUp ? 'Sign Up':' Sign In'}}</button>\n        </form>\n        <div class=\"other\">\n            <p routerLink=\"forgot-password\" *ngIf=\"!isSignUp\">Forgot Password?? <span></span></p>\n            <div *ngIf=\"isSignUp\" (click)=\"isSignUp =false\" class=\"link\">Already have An Account <button\n                    mat-raised-button color=\"accent\"> Sign in</button></div>\n            <div *ngIf=\"!isSignUp\" (click)=\"isSignUp =true\" class=\"link\">Don't have An Account <button mat-raised-button\n                    color=\"accent\"> Sign Up</button></div>\n\n             <!-- <button (click)=\"authService.GoogleAuth()\" mat-raised-button color=\"primary\" class=\"google-btn\">\n                <div><i class=\"fa-brands fa-google\"></i> Continue with Google</div>\n            </button> -->\n\n        </div>\n    </mat-card>\n</div>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { LoginFormComponent } from './login-form/login-form.component';\r\nimport { LoginComponent } from './login.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: LoginComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: LoginFormComponent,\r\n      },\r\n      { path: 'forgot-password', component: ForgotPasswordComponent },\r\n\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule { }\r\n","import { Component } from '@angular/core';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styles: [ `  \n  .page-content {\n    width: 100vw;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    background-color: #f6f6f6;\n  }` ]\n})\nexport class LoginComponent {\n \n}\n","<div class=\"page-content\">\r\n    <router-outlet></router-outlet>\r\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginRoutingModule } from './login-routing.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MaterialModule } from '../material.module';\nimport { LoginComponent } from './login.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { LoginFormComponent } from './login-form/login-form.component';\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    ForgotPasswordComponent,\n    LoginFormComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    LoginRoutingModule,\n  ]\n})\nexport class LoginModule { }\n"],"names":["Validators","i0","ForgotPasswordComponent","constructor","fb","forgotForm","group","email","required","onSubmit","value","selectors","decls","vars","consts","template","ctx","LoginFormComponent","signupForm","password","minLength","isSignUp","RouterModule","LoginComponent","routes","path","component","children","LoginRoutingModule","forChild","imports","exports","CommonModule","FormsModule","ReactiveFormsModule","MaterialModule","LoginModule","declarations"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}